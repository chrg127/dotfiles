" XDG support

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_CACHE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

if !has('nvim') " Neovim has its own special location
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif

" ===== settings =====

syntax on
filetype plugin indent on
set nocompatible
set showcmd           " Show (partial) command in status line.
set cmdheight=1       " one (1) line
set noshowmode        " Already have it in statusline
set ruler             " Show line and column number
set relativenumber    " left column displays relative numbers lines
set number            " now with current line number instead of 0
set laststatus=2      " Always display the status line
set autoread          " Read open files when changed in the background
set autowrite         " Automatically save before commands like :next and :make
set hlsearch          " Highlight searches
set ignorecase        " Do case insensitive matching
set incsearch         " Incremental search
set smartcase         " Do smart case matching
set tabstop=4         " Tab = 4 spaces
set expandtab         " Insert spaces instead of tabs
set shiftwidth=4      " Indent with 4 spaces
set splitright        " Splits
set foldmethod=indent " Folding
set foldnestmax=10    " max nesting of folds
set nofoldenable      " open all folds automatically
set foldlevel=2
if (&diff ==# 0)      " cursorline with diff is shit
    set cursorline
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
endif
set wildmenu          " Enhanced command completion
set hidden            " Hide buffers when they are abandoned
set showmatch         " Show matching bracket
set mouse=a           " Enable mouse usage (all modes)
set history=200       " Keep 200 lines of command history
set ttimeoutlen=5     " Time to wait for a key sequence to complete. Keep low.
set ffs=unix,dos
set encoding=UTF-8
set exrc              " read current dir's .vimrc
set secure            " secure local .vimrc by disabling some commands
set directory=~/.cache/vim/swap// " set a cache directory for swap files
set clipboard+=unnamedplus
set suffixes=".bak,~,.o,.swp,.obj,.d,.class" " ignore these file extensions when matching
set wildignore=*.o,*.d,*.class
set undofile
set undodir=~/.cache/vim/undo
set grepprg=grep\ -rInH
set grepformat=%f:%l:%m
set path=.,/usr/local/include,/usr/include,/usr/include/c++/11
set noerrorbells            " disable bells
runtime ftplugin/man.vim    " enable :Man command
set cpoptions+=J            " compatible options, sets something about sentences
set conceallevel=1          " affects concealing attributes, mostly for vimtex

" language specific settings
let c_gnu = 1
let c_space_errors = 1
let c_curly_error = 1
let c_ansi_typedefs = 1
let c_ansi_constants = 1
let java_highlight_java_lang_ids=1
let java_highlight_java_io=1

" ===== plugins =====
" disable netrw
let loaded_netrwPlugin = 1

" load pathogen
execute pathogen#infect()

" nerdtree
let NERDTreeMinimalUI=1

" gutentags
let g:gutentags_add_default_project_roots = 0
let g:gutentags_project_root = ['.git', '.hg', '.svn', 'Makefile', 'CMakeLists.txt']
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_ctags_extra_args=[ '--tag-relative=yes', '--fields=+S', ]
let g:gutentags_ctags_exclude=[
            \ 'build', 'dist', 'bin', 'cache', 'debug', 'release',
            \ 'compiled', 'docs', 'example', 'bundle', 'vendor', '.md',
            \ '.json',
            \ ]

" ultisnips
let g:UltiSnipsExpandTrigger = '<tab>'
let g:UltiSnipsJumpForwardTrigger = '<tab>'
let g:UltiSnipsJumpBackwardTrigger = '<s-tab>'

" vimtex
let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_quickfix_mode = 0
let g:tex_conceal='abdmg'
let g:vimtex_compiler_latexmk = {
            \ 'options' : [
            \   '-shell-escape',
            \   '-bibtex',
            \ ],
            \}



" ===== colors =====
" this should be a symlink
source ~/.config/vim/startup/color_chooser.vim

" ===== custom functions =====
function! s:StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
    endif
endfunction

function! s:CppMan(str)
    execute '!cppman ' . a:str
endfunction

function! s:ClangFormat(first, last)
    let l:winview = winsaveview()
    execute a:first . "," . a:last . "!clang-format --style=WebKit"
    call winrestview(l:winview)
endfunction



" ===== custom commands and autocmds =====

" jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" highlight extra whitespace
autocmd BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/
command! StripTrailingWhitespace :call s:StripTrailingWhitespace()

" open quickfix list after commands like :make
autocmd QuickFixCmdPost * copen | RefreshStatus

command! -nargs=1 CppMan :call s:CppMan(<f-args>)
command! -range=% ClangFormat call <sid>ClangFormat (<line1>, <line2>)

" filetypes
autocmd BufNewFile,BufRead *.qbs setfiletype qbs
autocmd BufNewFile,BufRead *.pro,*.pri set filetype=qmake
autocmd BufNewFile,BufRead *.qml setfiletype qml
autocmd BufNewFile,BufRead *.qrc setfiletype xml
autocmd BufNewFile,BufRead *.ts setfiletype xml
autocmd BufNewFile,BufRead *.ui setfiletype xml
autocmd BufNewFile,BufRead *.ypp setfiletype yacc
autocmd BufNewFile,BufRead *.asm set filetype=asm_ca65
autocmd BufNewFile,BufRead *.lox set filetype=lox
autocmd! BufNewFile,BufRead *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp set filetype=glsl

" fswitch
autocmd BufEnter *.hpp let b:fswitchdst = "cpp"
autocmd BufEnter *.cpp let b:fswitchdst = "hpp"

" nerdtree
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" gutentags
command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')


" ===== mappings =====

" set <Leader>
let mapleader = ","

" obvious
noremap Y y$

" use arrow keys for window management
nnoremap <Down>  :resize +2<CR>
nnoremap <Up>    :resize -2<CR>
nnoremap <Left>  :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>

" moves a line up/down
nnoremap <S-Down> ddp
nnoremap <S-Up> ddkP

" autoclosing brackets
inoremap (<CR> (<CR>)<Esc>O
inoremap {<CR> {<CR>}<Esc>O
inoremap {; {<CR>};<Esc>O
inoremap {, {<CR>},<Esc>O
inoremap [<CR> [<CR>]<Esc>O
inoremap [; [<CR>];<Esc>O
inoremap [, [<CR>],<Esc>O

" better :split, :vsplit and :edit
noremap <leader>s :sp **/
noremap <leader>v :vsp **/
nnoremap <leader>e :e **/

" switch buffers using ,b
nnoremap <leader>b :ls<CR>:b<space>

" quick switch to last buffer
nnoremap <leader>q :b#<CR>

" open links (not working)
" nnoremap gX :silent :execute "!xdg-open" expand('%:p:h') . "/" . expand("<cfile>") " &"<cr>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" shortcuts for fswitch
nnoremap <silent> <leader>ok :FSSplitAbove<cr>
nnoremap <silent> <leader>oj :FSSplitBelow<cr>
nnoremap <silent> <leader>oh :FSSplitLeft<cr>
nnoremap <silent> <leader>ol :FSSplitRight<cr>

" shortcut for nerdtree
nnoremap <leader>n :NERDTreeToggle<CR> :RefreshStatus<CR>

" keep selection after indention
vnoremap < <gv
vnoremap > >gv

" no ex mode
noremap Q <Nop>



" ===== other stuff ====
source ~/.config/vim/startup/statusline.vim
" source ~/.vim/startup/startscreen.vim
