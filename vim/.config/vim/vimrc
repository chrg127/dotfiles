" XDG support

if empty($MYVIMRC) | let $MYVIMRC = expand('<sfile>:p') | endif

if empty($XDG_CACHE_HOME)  | let $XDG_CACHE_HOME  = $HOME."/.cache"       | endif
if empty($XDG_CONFIG_HOME) | let $XDG_CONFIG_HOME = $HOME."/.config"      | endif
if empty($XDG_DATA_HOME)   | let $XDG_DATA_HOME   = $HOME."/.local/share" | endif
if empty($XDG_STATE_HOME)  | let $XDG_STATE_HOME  = $HOME."/.local/state" | endif

set runtimepath^=$XDG_CONFIG_HOME/vim
set runtimepath+=$XDG_DATA_HOME/vim
set runtimepath+=$XDG_CONFIG_HOME/vim/after

set packpath^=$XDG_DATA_HOME/vim,$XDG_CONFIG_HOME/vim
set packpath+=$XDG_CONFIG_HOME/vim/after,$XDG_DATA_HOME/vim/after

call mkdir($XDG_DATA_HOME."/vim/spell", 'p', 0700)

set backupdir=$XDG_CACHE_HOME/vim/backup | call mkdir(&backupdir, 'p', 0700)
set directory=$XDG_CACHE_HOME/vim/swap   | call mkdir(&directory, 'p', 0700)
set undodir=$XDG_CACHE_HOME/vim/undo     | call mkdir(&undodir,   'p', 0700)
set viewdir=$XDG_CACHE_HOME/vim/view     | call mkdir(&viewdir,   'p', 0700)

if !has('nvim') " neovim has its own special location
  set viminfofile=$XDG_CACHE_HOME/vim/viminfo
endif

" ===== settings =====

syntax on
filetype plugin indent on

let mapleader = ","         " set <Leader>
set nocompatible            " disable compatibility with vi
set showcmd                 " Show (partial) command in status line.
set cmdheight=1             " set number of screen lines to use for command line
set noshowmode              " Already have it in statusline
set relativenumber          " left column displays relative numbers lines
set number                  " now with current line number instead of 0
set laststatus=2            " Always display the status line
set autoread                " Read open files when changed in the background
set autowrite               " Automatically save before commands like :next and :make
set hlsearch                " Highlight searches
set ignorecase              " Do case insensitive matching
set incsearch               " Incremental search
set smartcase               " Do smart case matching
set tabstop=4               " Tab = 4 spaces
set expandtab               " Insert spaces instead of tabs
set shiftwidth=4            " Indent with 4 spaces
set splitright              " Splits
set foldmethod=indent       " Folding
set foldnestmax=10          " max nesting of folds
set nofoldenable            " open all folds automatically
set foldlevel=2
set wildmenu                " Enhanced command completion
set hidden                  " hide buffers when they are abandoned, don't unload
set showmatch               " Show matching bracket
set mouse=a                 " Enable mouse usage (all modes)
set history=200             " Keep 200 lines of command history
set ttimeoutlen=5           " Time to wait for a key sequence to complete. Keep low.
set ffs=unix,dos
set encoding=UTF-8
set exrc                    " read current dir's .vimrc
set secure                  " secure local .vimrc by disabling some commands
set undofile                " read previous undo history when loading a file
set grepprg=grep\ -rInH
set grepformat=%f:%l:%m
set noerrorbells            " disable bells
set cpoptions+=J            " compatible options, sets something about sentences
set conceallevel=1          " affects concealing attributes, mostly for vimtex
set formatoptions+=/        " no continuation of comments
set completeopt+=menuone    " when completing, open popup even with only one item
set signcolumn=yes          " always draw the sign column (used by lsp plugins)
runtime ftplugin/man.vim    " enable :Man command

" copies selection to the system clipboard. IMPORTANT: uses ^ so that
" items are prepended rather than appended.
set clipboard^=unnamed,unnamedplus

" ignore these file extensions when matching
set suffixes=".bak,~,.o,.swp,.obj,.d,.class"
set wildignore=*.o,*.d,*.class

" sets up cursorline unless we are diffing
if (&diff ==# 0)
    set cursorline
    autocmd WinEnter * setlocal cursorline
    autocmd WinLeave * setlocal nocursorline
endif

" ===== plugins =====

" disable netrw
let loaded_netrwPlugin = 1

" load pathogen
execute pathogen#infect('plugins/{}')

" nerdtree
let NERDTreeMinimalUI=1
autocmd BufEnter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif
nnoremap <leader>n :NERDTreeToggle<CR> :RefreshStatus<CR>

" gutentags
let g:gutentags_add_default_project_roots = 0
" .tagmarker is a custom thing to let me have tags on projects without
" version control
let g:gutentags_project_root = ['.git', '.hg', '.svn', '.tagmarker']
let g:gutentags_cache_dir = expand('~/.cache/vim/ctags/')
let g:gutentags_generate_on_new = 1
let g:gutentags_generate_on_missing = 1
let g:gutentags_generate_on_write = 1
let g:gutentags_generate_on_empty_buffer = 0
let g:gutentags_ctags_extra_args=[ '--tag-relative=yes', '--fields=+S', ]
let g:gutentags_ctags_exclude=[
            \ 'build', 'dist', 'bin', 'cache', 'debug', 'release',
            \ 'compiled', 'docs', 'example', 'bundle', 'vendor', '.md',
            \ '.json',
            \ ]

command! -nargs=0 GutentagsClearCache call system('rm ' . g:gutentags_cache_dir . '/*')

" ultisnips
let g:UltiSnipsExpandTrigger = '<C-j>'
let g:UltiSnipsJumpForwardTrigger = '<C-j>'
let g:UltiSnipsJumpBackwardTrigger = '<C-k>'
let g:UltiSnipsSnippetDirectories=[$HOME.'/.config/vim/UltiSnips']

" vimtex
let g:tex_flavor = 'latex'
let g:vimtex_view_general_viewer = 'okular'
let g:vimtex_view_general_options = '--unique file:@pdf\#src:@line@tex'
let g:vimtex_quickfix_mode = 0
let g:vimtex_quickfix_open_on_warning = 0
let g:tex_conceal='abdmg'
" \   '-shell-escape',
" \   '-bibtex',

let g:vimtex_compiler_latexmk = {
            \ 'options' : [
            \   '-verbose',
            \   '-file-line-error',
            \   '-interaction=nonstopmode',
            \   '-synctex=1',
            \ ],
            \}

" Filter out some compilation warning messages from QuickFix display
let g:vimtex_quickfix_ignore_filters = [
      \ 'Underfull \\hbox',
      \ 'Overfull \\hbox',
      \ 'LaTeX Warning: .\+ float specifier changed to',
      \ 'LaTeX hooks Warning',
      \ 'Package siunitx Warning: Detected the "physics" package:',
      \ 'Package hyperref Warning: Token not allowed in a PDF string',
      \]

" vim-system-copy
let g:system_copy_silent = 1

" vim-lsp
let g:lsp_diagnostics_enabled = 0   " disable diagnostic support
let g:lsp_document_code_action_signs_enabled = 0
" let g:lsp_hover_ui = 'preview'
hi lspReference ctermfg=red guifg=red ctermbg=green guibg=green

if executable('clangd')
    autocmd User lsp_setup call lsp#register_server({
                \ 'name': 'clangd',
                \ 'cmd': {server_info->['clangd', '-background-index']},
                \ 'whitelist': ['c', 'cpp', 'objc', 'objcpp'],
                \ })
endif

function! s:on_lsp_buffer_enabled() abort
    setlocal omnifunc=lsp#complete
    " if exists('+tagfunc') | setlocal tagfunc=lsp#tagfunc | endif
    nmap <buffer> gd <plug>(lsp-definition)
    nmap <buffer> gs <plug>(lsp-document-symbol-search)
    nmap <buffer> gS <plug>(lsp-workspace-symbol-search)
    nmap <buffer> gr <plug>(lsp-references)
    nmap <buffer> gi <plug>(lsp-implementation)
    nmap <buffer> gt <plug>(lsp-type-definition)
    nmap <buffer> <leader>rn <plug>(lsp-rename)
    nmap <buffer> K <plug>(lsp-hover)
endfunction

augroup lsp_install
    au!
    autocmd User lsp_buffer_enabled call s:on_lsp_buffer_enabled()
augroup END

" fswitch
autocmd BufEnter *.hpp let b:fswitchdst = "cpp"
autocmd BufEnter *.cpp let b:fswitchdst = "hpp,h"
autocmd BufEnter *.c let b:fswitchdst = "h"
nnoremap <silent> <leader>ok :FSSplitAbove<cr>
nnoremap <silent> <leader>oj :FSSplitBelow<cr>
nnoremap <silent> <leader>oh :FSSplitLeft<cr>
nnoremap <silent> <leader>ol :FSSplitRight<cr>

" ===== colors =====
color dosboxblack

" ===== other =====

" jump to the last position when reopening a file
autocmd BufReadPost * if line("'\"") > 1 && line("'\"") <= line("$") | exe "normal! g'\"" | endif

" open quickfix list after commands like :make
autocmd QuickFixCmdPost * copen | RefreshStatus

" filetypes
autocmd BufNewFile,BufRead *.qbs setfiletype qbs
autocmd BufNewFile,BufRead *.pro,*.pri set filetype=qmake
autocmd BufNewFile,BufRead *.qml setfiletype qml
autocmd BufNewFile,BufRead *.qrc setfiletype xml
autocmd BufNewFile,BufRead *.ts setfiletype xml
autocmd BufNewFile,BufRead *.ui setfiletype xml
autocmd BufNewFile,BufRead *.ypp setfiletype yacc
autocmd BufNewFile,BufRead *.lox set filetype=lox
autocmd BufNewFile,BufRead *.vert,*.tesc,*.tese,*.glsl,*.geom,*.frag,*.comp set filetype=glsl

" whitespace support. provides a command to strip whitespace and highlights
" extra whitespace present in the buffer
function! s:StripTrailingWhitespace()
    if !&binary && &filetype != 'diff'
        normal mz
        normal Hmy
        %s/\s\+$//e
        normal 'yz<CR>
        normal `z
    endif
endfunction
command! StripTrailingWhitespace :call s:StripTrailingWhitespace()

autocmd BufWinEnter * match Error /\s\+$/
autocmd InsertEnter * match Error /\s\+\%#\@<!$/
autocmd InsertLeave * match Error /\s\+$/



" ===== mappings =====

" obvious
noremap Y y$

" use arrow keys for window management
nnoremap <Down>  :resize +2<CR>
nnoremap <Up>    :resize -2<CR>
nnoremap <Left>  :vertical resize +2<CR>
nnoremap <Right> :vertical resize -2<CR>

" moves a line up/down
nnoremap <S-Down> ddp
nnoremap <S-Up> ddkP

" autoclosing brackets
inoremap (<CR> (<CR>)<Esc>O
inoremap {<CR> {<CR>}<Esc>O
inoremap {; {<CR>};<Esc>O
inoremap {, {<CR>},<Esc>O
inoremap [<CR> [<CR>]<Esc>O
inoremap [; [<CR>];<Esc>O
inoremap [, [<CR>],<Esc>O

" better :split, :vsplit and :edit
noremap <leader>s :sp **/
noremap <leader>v :vsp **/
nnoremap <leader>e :e **/

" using ,b will show all buffers before choosing one
nnoremap <leader>b :ls<CR>:b<space>

" quick switch to last buffer
nnoremap <leader>q :b#<CR>

" open links (not working)
" nnoremap gX :silent :execute "!xdg-open" expand('%:p:h') . "/" . expand("<cfile>") " &"<cr>

" window navigation
nnoremap <C-h> <C-w>h
nnoremap <C-j> <C-w>j
nnoremap <C-k> <C-w>k
nnoremap <C-l> <C-w>l

" keep selection after indention
vnoremap < <gv
vnoremap > >gv

" disable ex mode
noremap Q <Nop>



" ===== status line ====
let g:currentmode={
    \ 'n'       : 'Normale',   'no' : 'N·Attesa',    'v'  : 'Visuale',       'V'  : 'V·Riga',
    \ "\<c-v>"  : 'V·Blocco',  's'  : 'Selezione',   'S'  : 'S·Riga',        '^S' : 'S·Blocco',
    \ 'i'       : 'Inserisci', 'R'  : 'Sostituisci', 'Rv' : 'V·Sostituisci', 'c'  : 'Comando',
    \ 'cv'      : 'Vim Ex',    'ce' : 'Ex',          'r'  : 'Prompt',        'rm' : 'Di piu',
    \ 'r?'      : 'Conferma',  '!'  : 'Shell',       't'  : 'Terminale',
    \}

let g:mode_colors={
    \ 'n'       : 'User5', 'no' : 'User5',  'v'  : 'User6',    'V'  : 'User6',
    \ "\<c-v>"  : 'User6', 's'  : 'User8',  'S'  : 'User8',    '^S' : 'User8',
    \ 'i'       : 'User7', 'R'  : 'User8',  'Rv' : 'User8',    'c'  : 'User5',
    \ 'cv'      : 'User5', 'ce' : 'User5',  'r'  : 'User5',    'rm' : 'User5',
    \ 'r?'      : 'User5', '!'  : 'User5',  't'  : 'User5',
    \}

function! Status(winnum)
    let stat=''
    let active = a:winnum == winnr()
    let bufnum = winbufnr(a:winnum)
    let type = getbufvar(bufnum, '&buftype')
    let filetype = getbufvar(bufnum, '&ft')
    let stat .= active ? '%#' . g:mode_colors[mode()] . '#  %{toupper(g:currentmode[mode()])}  ' : '%4*  INATTIVO  '
    let stat .= '%#StatusLine#'
    if type ==# 'nofile'
        let stat.=active ? '%3* ' : ' '
        if filetype ==# "nerdtree"
            let stat.='NERDTree'
        elseif filetype ==# 'man'
            let stat.='man'
        elseif filetype ==# 'dirvish'
            let stat.='dirvish: ' . bufname(bufnum) . ' '
        elseif filetype ==# 'startscreen'
            let stat.='start screen'
        else
            let stat.='???'
        endif
        let stat.='%#StatusLine#'
    else
        let stat .= ' %n: '
        let stat .= active ? '%3*' : ''
        let stat .= type ==# 'help' ? '[Aiuto] ' : ''
        let stat .= '%f%#StatusLine#'
        let stat .= getbufvar(bufnum, '&modified') ? '%2* [+] %#StatusLine#' : ''
        let stat .= getbufvar(bufnum, '&readonly') || !getbufvar(bufnum, '&modifiable') ? '%1*  %#StatusLine#'   : ''
        let stat .= '%w%<%='
        let stat .= active ? gutentags#statusline('[', ']') . ' ' : ''
        let stat .= filetype ==# '' ? 'normal text ' : filetype . ' '
        let stat .= active ? '%#User9# ' : '%#StatusLine# '
        let stat .= getbufvar(bufnum, '&encoding') . ' :: ' . getbufvar(bufnum, '&fileformat') . ' '
        let stat .= active ? '%#User5#' : '%4*'
        let stat .= ' %l, %v :: %L '
    endif
    return stat
endfunction

function! s:RefreshStatus()
    " for each window set statusline to whatever Status() returns
    for nr in range(1, winnr('$'))
        call setwinvar(nr, '&statusline', '%!Status(' . nr . ')')
    endfor
endfunction

command! RefreshStatus :call <SID>RefreshStatus()

augroup status
    autocmd!
    autocmd VimEnter,VimLeave,WinEnter,WinLeave,BufWinEnter,BufWinLeave,BufEnter,BufLeave * :RefreshStatus
augroup END
