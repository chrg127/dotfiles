#!/bin/bash

# change and list directory
cdl() {
    cd "$1" && ls
}

# make directory and change into it
mkcdir() {
    mkdir "$@";
    if [ "$1" = "-p" ]; then
        cd "$2";
    else
        cd "$1";
    fi
}

# functions for outputting text in the prompt.
# using "echo" is a hack.
function ps1_ssh {
    if [[ "${SSH_CLIENT}" || "${SSH_TTY}" ]]; then
        printf " $(ip route get 1 | tr -s ' ' | cut -d' ' -f7) "
    fi
}

function ps1_read_only {
    if [ ! -w "$PWD" ]; then
        printf ' '
    fi
}

function ps1_git {
    local branch=$(git rev-parse --abbrev-ref HEAD 2> /dev/null)
    if [ -n "$branch" ]; then
        if [ -n "$(git status --porcelain 2> /dev/null)" ]; then
            printf '\033[1;93m'
        else
            printf '\033[1;92m'
        fi
        printf "$branch "
    fi
}

function draw_prompt {
    local ERRCODE="$?"
    PS1=""

    PS1+=$CYAN'\u@\h ' # user@host
    PS1+=$BLUE'\w '    # directory
    PS1+=$PURPLE
    PS1+="\$(ps1_ssh)"
    PS1+="\$(ps1_git)"
    PS1+=$RED
    PS1+="\$(ps1_read_only)"
    if [ $ERRCODE != 0 ]; then
        PS1+="$ERRCODE"
    fi
    #PS1+="\$?"
    #PS1+='\[\033[00m\]$ '                       # $
    PS1+='\[\033[00m\]\n$ '                      # $ with newline
}

colors() {
    local fgc bgc vals seq0
    
    printf "Color escapes are %s\n" '\e[${value};...;${value}m'
    printf "Values 30..37 are \e[33mforeground colors\e[m\n"
    printf "Values 40..47 are \e[43mbackground colors\e[m\n"
    printf "Value  1 gives a  \e[1mbold-faced look\e[m\n\n"

    # foreground colors
    for fgc in {30..37}; do
        # background colors
        for bgc in {40..47}; do
            fgc=${fgc#37} # white
            bgc=${bgc#40} # black
            vals="${fgc:+$fgc;}${bgc}"
            vals=${vals%%;}
            seq0="${vals:+\e[${vals}m}"
            printf "  %-9s" "${seq0:-(default)}"
            printf " ${seq0}TEXT\e[m"
            printf " \e[${vals:+${vals+$vals;}}1mBOLD\e[m"
        done
     echo; echo
     done
}

ex() {
  if [ -f $1 ] ; then
    case $1 in
      *.tar.bz2)   tar xjf $1   ;;
      *.tar.gz)    tar xzf $1   ;;
      *.bz2)       bunzip2 $1   ;;
      *.rar)       unrar x $1     ;;
      *.gz)        gunzip $1    ;;
      *.tar)       tar xf $1    ;;
      *.tbz2)      tar xjf $1   ;;
      *.tgz)       tar xzf $1   ;;
      *.zip)       unzip $1     ;;
      *.Z)         uncompress $1;;
      *.7z)        7z x $1      ;;
      *)           echo "'$1' cannot be extracted via ex()" ;;
    esac
  else
    echo "'$1' is not a valid file"
  fi
}

dec2bin() {
    for i in $@
    do
        echo "obase=2; $i" | bc
    done
}

dec2hex() {
    for i in $@
    do
        echo "obase=16; $i" | bc
    done
}

hex2dec() {
    for i in $@
    do
        echo "ibase=16; $i" | bc
    done
}

bin2dec() {
    for i in $@
    do
        echo "ibase=2; $i" | bc
    done
}

# This function defines a 'cd' replacement function capable of keeping, 
# displaying and accessing history of visited directories, up to 10 entries.
cd_func ()
{
    local x2 the_new_dir adir index
    local -i cnt
  
    if [[ $1 ==  "--" ]]; then
        dirs -v
        return 0
    fi

    the_new_dir=$1
    [[ -z $1 ]] && the_new_dir=$HOME
  
    if [[ ${the_new_dir:0:1} == '-' ]]; then
        # Extract dir N from dirs
        index=${the_new_dir:1}
        [[ -z $index ]] && index=1
        adir=$(dirs +$index)
        [[ -z $adir ]] && return 1
        the_new_dir=$adir
    fi
  
    # '~' has to be substituted by ${HOME}
    [[ ${the_new_dir:0:1} == '~' ]] && the_new_dir="${HOME}${the_new_dir:1}"
  
    # Now change to the new dir and add to the top of the stack
    pushd "${the_new_dir}" > /dev/null
    [[ $? -ne 0 ]] && return 1
    the_new_dir=$(pwd)
  
    # Trim down everything beyond 11th entry
    popd -n +11 2>/dev/null 1>/dev/null
  
    # Remove any other occurence of this dir, skipping the top of the stack
    for ((cnt=1; cnt <= 10; cnt++)); do
        x2=$(dirs +${cnt} 2>/dev/null)
        [[ $? -ne 0 ]] && return 0
        [[ ${x2:0:1} == '~' ]] && x2="${HOME}${x2:1}"
        if [[ "${x2}" == "${the_new_dir}" ]]; then
            popd -n +$cnt 2>/dev/null 1>/dev/null
            cnt=cnt-1
        fi
    done
  
    return 0
}
alias cd=cd_func
